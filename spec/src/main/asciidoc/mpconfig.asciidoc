//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[concurrencympconfig]]
== Establishing default values with MicroProfile Config

If a MicroProfile Config implementation is available, MicroProfile Config can be used to establish default values for configuration attributes of `ManagedExecutor` and `ThreadContext`. This allows the application to bypass configuration of one or more attributes when using the builders to create instances.

For example, you could specify MicroProfile Config properties as follows to establish a set of defaults for `ManagedExecutor`,

[source, text]
----
ManagedExecutor/propagated=Remaining
ManagedExecutor/cleared=Transaction
ManagedExecutor/maxAsync=10
ManagedExecutor/maxQueued=-1
----

With these defaults in place, the application can create a `ManagedExecutor` instance without specifying some of the configuration attributes,

[source, java]
----
executor = ManagedExecutor.builder().maxAsync(5).build();
----

In the code above, the application specifies only the `maxAsync` attribute, limiting actions and tasks requested to run async to at most 5 running at any given time. The other configuration attributes are defaulted as specified in MicroProfile config, with no upper bound on queued tasks, Transaction context cleared, and all other context types propagated.

As another example, the following MicroProfile Config properties establish defaults for `ThreadContext`,

[source, text]
----
ThreadContext/propagated=
ThreadContext/cleared=Security,Transaction
ThreadContext/unchanged=Remaining
----

With these defaults in place, the application can create a `ThreadContext` instance without specifying some of the configuration attributes,

[source, java]
----
cdiContextPropagator = ThreadContext.builder()
                                    .propagated(ThreadContext.CDI)
                                    .build();
----

In the code above, the application specifies only the `propagated` attribute, indicating that only CDI context is propagated. The other configuration attributes inherit the defaults, which includes clearing Security and Transaction context and leaving all other thread context types unchanged.

== Overriding configured values with MicroProfile Config

MicroProfile Config can also be used to override configured values. This is true of instances that are built by the application as well as those produced by the container for injection as CDI beans.  The former involves standard usage of MicroProfile Config.  The latter relies upon the convention of defining MicroProfile Config property names that correspond to the fully qualified name of the injection point for which the instance is produced.  For `ManagedExecutor` and `ThreadContext` instances produced by the container, MicroProfile Config is applied statically. These instances will not dynamically respond to MicroProfile Config changes made after they are produced.

=== Application usage of MicroProfile Config

Applications can use MicroProfile Config in the standard way to enable configuration attributes of the `ManagedExecutor` and `ThreadContext` builders to be overridden.  For example,

[source, java]
----
@Produces @ApplicationScoped @NamedInstance("executor1")
ManagedExecutor createExecutor(
    @ConfigProperty(name="exec1.maxAsync", defaultValue="5") Integer a,
    @ConfigProperty(name="exec1.maxQueued", defaultValue="20") Integer q) {
    return ManagedExecutor.builder()
                          .maxAsync(a)
                          .maxQueued(q)
                          .propagated(ThreadContext.SECURITY, ThreadContext.APPLICATION)
                          .cleared(ThreadContext.ALL_REMAINING)
                          .build();
}
----

MicroProfile Config can be used to override configuration attributes from the above example as follows,

----
exec1.maxAsync=10
exec1.maxQueued=15
----

=== Container usage of MicroProfile Config

The container produces an instance per `ManagedExecutor` injection point that is annotated with the `@ManagedExecutorConfig` annotation. And likewise for `ThreadContext` and `@ThreadContextConfig`.

In each of these cases, MicroProfile Config can be used to override the configuration of the instance that is produced by the container.

To override a configuration attribute of an instance that is produced for injection into a field, specify a MicroProfile Config property with the name equal to the fully qualified class name, field name, annotation name, and annotation attribute name, delimited by the `/` character.

[source, java]
----
package org.eclipse.microprofile.example;
...
public class MyBean {
    @Inject @ManagedExecutorConfig(maxAsync=3, propagated=ThreadContext.APPLICATION, cleared=ThreadContext.ALL_REMAINING)
    ManagedExecutor exec3;

    @Inject @NamedInstance("executor4") @ManagedExecutorConfig(maxAsync=4, propagated=ThreadContext.SECURITY, cleared=ThreadContext.ALL_REMAINING)
    ManagedExecutor exec4;

    @Inject @NamedInstance("executor4")
    ManagedExecutor exec5;
}
----

----
org.eclipse.microprofile.example.MyBean/exec3/ManagedExecutorConfig/maxAsync=6
org.eclipse.microprofile.example.MyBean/exec4/ManagedExecutorConfig/maxAsync=7
----

Note that `org.eclipse.microprofile.example.MyBean/exec4/ManagedExecutorConfig/maxAsync` overrides the configuration of the instance that is produced for injection into `exec4`. This same instance is injected into `exec5` per the matching `@NamedInstance("executor4")` qualifier.  It is incorrect to specify `org.eclipse.microprofile.example.MyBean/exec5/ManagedExecutorConfig/maxAsync`, which will not apply to `exec5`.

To override a configuration attribute of an instance that is produced for injection into a parameter, specify a MicroProfile Config property with its name equal to the fully qualified class name, method name, parameter number (starting at 1), annotation name, and annotation attribute name, delimited by the `/` character.

[source, java]
----
package org.eclipse.microprofile.example;
...
public class MyBean {
    @Produces @ApplicationScoped @NamedInstance("executor6")
    ManagedExecutor createExecutor(@ManagedExecutorConfig(maxAsync=6,
                                                          propagated=ThreadContext.CDI,
                                                          cleared=ThreadContext.ALL_REMAINING)
                                   ManagedExecutor exec) {
        return exec;
    }

    @Inject @NamedInstance("executor6")
    ManagedExecutor exec6;
}
----

----
org.eclipse.microprofile.example.MyBean/createExecutor/1/ManagedExecutorConfig/maxAsync=10
----

Again, it would be wrong to specify `org.eclipse.microprofile.example.MyBean/exec6/ManagedExecutorConfig/maxAsync`, because the container does not produce a new instance for the `exec6` injection point. The container produces the new instance for the `exec` injection point, and matches that same instance for injection into `exec6` per the `@NamedInstance("executor6")` qualifier.

=== Overriding Array Properties in MicroProfile Config

MicroProfile Config can be used to override array type properties (`propagated`, `cleared`, and `unchanged`) on injection points for which the container creates `ManagedExecutor` or `ThreadContext` instances. The following rules apply for config property values:

- The value can be a single array element, multiple elements (delimited by `,`), or empty.
- Array elements can be any value returned by a ``ThreadContextProvider``'s `getThreadContextType()` method.
- Array elements can be any thread context type constant value from ThreadContext (such as `Security`, `Application`, or `Remaining`).
- The usual rules from the MicroProfile Config specification apply, such as escaping special characters.

For example, we can start with the following injection point, which is configured to clear the `Transaction` context, leave no context type unchanged, and propagate all `Remaining` context types,

[source, java]
----
package org.eclipse.microprofile.example;
...
public class MyBean {
    @Inject @ThreadContextConfig(cleared=ThreadContext.TRANSACTION, unchanged={}, propagated=ThreadContext.ALL_REMAINING)
    ThreadContext contextPropagator;
}
----

If the user wishes to override the above to propagate exactly 2 context types (`Application` and `CDI`), clear nothing, and leave all `Remaining` types unchanged, then they could configure the following MicroProfile Config properties,

----
org.eclipse.microprofile.example.MyBean/contextPropagator/ThreadContextConfig/propagated=Application,CDI
org.eclipse.microprofile.example.MyBean/contextPropagator/ThreadContextConfig/cleared=
org.eclipse.microprofile.example.MyBean/contextPropagator/ThreadContextConfig/unchanged=Remaining
----

In order to guarantee that empty string config values are interpreted properly, the MicroProfile Concurrency implementation must interpret both of the following as indicating empty:

* empty array
* array containing the empty String as its singular element

This is necessary due to a lack of clarity in the first several versions of the MicroProfile Config specification about how the empty string value is to be interpreted for arrays of String.
