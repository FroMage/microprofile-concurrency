//
// Copyright (c) 2018 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[builders]]
== Builders for ManagedExecutor and ThreadContext

MicroProfile Concurrency provides a fluent builder API to programmatically obtain instances of ManagedExecutor and ThreadContext. Builder instances are obtained via static builder() methods on ManagedExecutor and ThreadContext.

=== Example ManagedExecutor Builder Usage

[source, java]
----
    public void init(ServletConfig config) {
        executor = ManagedExecutor.builder()
                                  .propagated(ThreadContext.APPLICATION)
                                  .cleared(ThreadContext.ALL_REMAINING)
                                  .maxAsync(5)
                                  .build();
    }

    public void doGet(HttpServletRequest req, HttpServletResponse res) {
       completionStage = executor.runAsync(task1)
                             .thenRunAsync(task2)
                             ...
    }

    public void destroy() {
        executor.shutdown();
    }
----

Applications are encouraged to cache and reuse ManagedExecutor instances.
It is the responsibility of the application to shut down ManagedExecutor
instances that are no longer needed, so as to allow the container to
efficiently free up resources.

=== Example ThreadContext Builder Usage

[source, java]
----
    threadContext = ThreadContext.builder()
                        .propagated(ThreadContext.APPLICATION, ThreadContext.SECURITY)
                        .cleared(ThreadContext.ALL_REMAINING)
                        .build();

    ...

    Function<Long, Long> contextFn = threadContext.contextualFunction(x -> {
        ... operations that requires security & application context
        return result;
    });

    // By using java.util.concurrent.CompletableFuture.supplyAsync rather
    // than a managed executor, context propagation is unpredictable,
    // except for the contextFn action that we pre-contextualized using
    // MicroProfile Concurrency's ThreadContext above.
    stage = CompletableFuture.supplyAsync(supplier)
                             .thenApplyAsync(function1)
                             .thenApply(contextFn)
                             ...
----

Builder instances retain their configuration after the build method is
invoked and can be reused. Subsequent changes to builder configuration
apply to subsequent invocations of the build method but do not impact
ManagedExecutors that have already been built.