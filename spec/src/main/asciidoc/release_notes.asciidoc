//
// Copyright (c) 2018 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

[[release_notes_10]]
== Release Notes for MicroProfile Concurrency 1.0

http://download.eclipse.org/microprofile/microprofile-concurrency-1.0/microprofile-concurrency.pdf[MicroProfile Concurrency Spec PDF]
http://download.eclipse.org/microprofile/microprofile-concurrency-1.0/microprofile-concurrency.html[MicroProfile Concurrency Spec HTML]
http://download.eclipse.org/microprofile/microprofile-concurrency-1.0/apidocs/[MicroProfile Concurrency Spec Javadocs]

Key features:

- `CompletableFuture`/`CompletionStage` implementations with predictable thread context and  using managed threads for async actions
- Ability to contextualize only specific actions/tasks
- Compatibility with EE Concurrency
- CDI injection as well as builder pattern
- Configurable via MicroProfile Config

To get started, add this dependency to your project:

[source,xml]
----
<dependency>
    <groupId>org.eclipse.microprofile.concurrency</groupId>
    <artifactId>microprofile-concurrency-api</artifactId>
    <version>1.0</version>
    <scope>provided</scope>
</dependency>
----

Use CDI to inject a `ManagedExecutor` or `ThreadContext` service:

[source,java]
----
public class MyBean {
    @Inject ManagedExecutor executor;
----

Or you can create one using a builder:

[source,java]
----
    ManagedExecutor executor = ManagedExecutor.builder()
                       .propagated(ThreadContext.APPLICATION, ThreadContext.CDI)
                       .maxAsync(5)
                       .build();
----

Then obtain a `CompletableFuture` or `CompletionStage` from the `ManagedExecutor`, and from there use it the same as Java SE:

[source,java]
----
    CompletableFuture<Integer> cf1 = executor.supplyAsync(supplier1)
                                             .thenApplyAsync(function1)
                                             .thenApply(function2);
----
